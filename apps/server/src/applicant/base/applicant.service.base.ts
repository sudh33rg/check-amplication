/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Applicant as PrismaApplicant,
  Interview as PrismaInterview,
  Position as PrismaPosition,
} from "@prisma/client";

export class ApplicantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicant.count(args);
  }

  async applicants(
    args: Prisma.ApplicantFindManyArgs
  ): Promise<PrismaApplicant[]> {
    return this.prisma.applicant.findMany(args);
  }
  async applicant(
    args: Prisma.ApplicantFindUniqueArgs
  ): Promise<PrismaApplicant | null> {
    return this.prisma.applicant.findUnique(args);
  }
  async createApplicant(
    args: Prisma.ApplicantCreateArgs
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.create(args);
  }
  async updateApplicant(
    args: Prisma.ApplicantUpdateArgs
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.update(args);
  }
  async deleteApplicant(
    args: Prisma.ApplicantDeleteArgs
  ): Promise<PrismaApplicant> {
    return this.prisma.applicant.delete(args);
  }

  async findInterviews(
    parentId: string,
    args: Prisma.InterviewFindManyArgs
  ): Promise<PrismaInterview[]> {
    return this.prisma.applicant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .interviews(args);
  }

  async getPosition(parentId: string): Promise<PrismaPosition | null> {
    return this.prisma.applicant
      .findUnique({
        where: { id: parentId },
      })
      .position();
  }
}
